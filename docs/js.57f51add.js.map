{"version":3,"sources":["js/index.js"],"names":["form","document","querySelector","ValidateClientSideForm","_form","validator","email","regex","help","text","password","_errors","fields","querySelectorAll","addEventListener","handleSubmit","bind","forEach","field","handleFocus","handleBlur","handleInput","value","type","name","test","validate","removeAlert","id","addAlert","find","setAlert","setError","clearAlert","clearError","classList","add","remove","setAttribute","parentElement","nextElementSibling","textContent","labels","join","errName","includes","push","length","splice","indexOf","el","focus","filter","setFocus","getEmptyFields","addValidation","event","preventDefault","submitForm","target","init"],"mappings":"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","file":"js.57f51add.js","sourceRoot":"../src","sourcesContent":["(function() {\n  const form = document.querySelector(\"form\");\n\n  /**\n   * Client-Side Validation\n   * ATTENTION: Server-side validation is REQUIRED\n   */\n  class ValidateClientSideForm {\n    constructor(form) {\n      this._form = form;\n\n      /*\n      Validation patterns for different field types. Password validation is very loose, don't forget this is only a demo without clear requirement about this type of data.\n      */\n      this.validator = {\n        email: {\n          regex: /^([a-zA-Z0-9\\.-]{1,64})+@([a-z]{1,254})+\\.([a-z]{2,8})(\\.[a-z]{2,8})?$/,\n          help: \"Looks like this is not an email\"\n        },\n        text: {\n          regex: /^[a-zA-Z\\s]+?$/,\n          help: \"cannot be empty\"\n        },\n        password: {\n          regex: /^[a-zA-Z0-9\\_-]+?$/,\n          help: \"cannot be empty\"\n        }\n      };\n\n      this._errors = [];\n\n      this.fields = [\n        ...this._form.querySelectorAll(\n          \"input[type=text], input[type=email], input[type=password]\"\n        )\n      ];\n    }\n\n    init() {\n      this._form.addEventListener(\"submit\", this.handleSubmit.bind(this));\n\n      this.fields.forEach(field => {\n        field.addEventListener(\"focus\", this.handleFocus.bind(this), true);\n        field.addEventListener(\"blur\", this.handleBlur.bind(this), true);\n        field.addEventListener(\"input\", this.handleInput.bind(this));\n      });\n    }\n\n    validate(field) {\n      const { value, type, name } = field;\n\n      if (value === \"\") return false;\n      else if (name === \"email\")\n        if (this.validator[name].regex.test(value)) return true;\n        else return false;\n      else if (this.validator[type].regex.test(value)) return true;\n      else return false;\n    }\n\n    addValidation(field) {\n      if (this.validate(field)) this.removeAlert(field.id);\n      else this.addAlert(field.id);\n    }\n\n    addAlert(id) {\n      const field = this.fields.find(field => field.id === id);\n      this.setAlert(field);\n      this.setError(field.name);\n    }\n\n    removeAlert(id) {\n      const field = this.fields.find(field => field.id === id);\n      this.clearAlert(field);\n      this.clearError(field.name);\n    }\n\n    setAlert(field) {\n      const { type, name } = field;\n      field.classList.add(\"invalid\");\n      field.classList.remove(\"valid\");\n      field.setAttribute(\"aria-invalid\", true);\n      field.parentElement.nextElementSibling.textContent = `${\n        name === \"email\"\n          ? this.validator[name].help\n          : [field.labels[0].textContent, this.validator[type].help].join(` `)\n      }`;\n    }\n\n    clearAlert(field) {\n      field.classList.remove(\"invalid\");\n      field.classList.add(\"valid\");\n      field.setAttribute(\"aria-invalid\", false);\n      field.parentElement.nextElementSibling.textContent = \"\";\n    }\n\n    setError(errName) {\n      if (this._errors.includes(errName)) return;\n      this._errors.push(errName);\n    }\n\n    clearError(errName) {\n      if (this._errors.length == 0) return;\n      this._errors.splice(this._errors.indexOf(errName), 1);\n    }\n\n    setFocus(name) {\n      const el = this.fields.find(el => el.name === name);\n      el.focus();\n    }\n\n    getEmptyFields() {\n      return this.fields.filter(field => {\n        return field.value === \"\";\n      });\n    }\n\n    submitForm() {\n      // If found errors from instant validation then auto focus the first error\n      if (this._errors.length > 0) {\n        this.setFocus(this._errors[0]);\n        return false;\n      }\n      // else validate fields if user left empty fields\n      else if (this.getEmptyFields().length > 0) {\n        this.getEmptyFields().forEach(field => {\n          this.addValidation(field);\n        });\n        this.setFocus(this.getEmptyFields()[0].name);\n        return false;\n      }\n      // ready to subumit form\n      else return true;\n    }\n\n    handleSubmit(event) {\n      event.preventDefault();\n\n      // returns true if form has no errors else false forms has errors.\n      this.submitForm();\n    }\n\n    handleFocus({ target }) {\n      target.parentElement.classList.add(\"focused\");\n    }\n\n    handleBlur({ target }) {\n      if (target.value.length == 0) {\n        target.parentElement.classList.remove(\"focused\");\n      }\n    }\n\n    handleInput({ target }) {\n      // handles instant validation the field\n      this.addValidation(target);\n    }\n  }\n\n  new ValidateClientSideForm(form).init();\n})();\n"]}