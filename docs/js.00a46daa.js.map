{"version":3,"sources":["js/index.js"],"names":["form","document","querySelector","ValidateClientSideForm","_form","validator","email","regex","message","text","password","_errors","fields","querySelectorAll","addEventListener","handleSubmit","bind","forEach","field","handleFocus","handleBlur","handleInput","value","type","name","test","validate","removeAlert","id","addAlert","find","setAlert","setError","clearAlert","clearError","classList","add","remove","setAttribute","labels","textContent","join","nextElementSibling","contains","setCustomValidity","errName","includes","push","length","splice","indexOf","el","focus","filter","setFocus","getEmptyFields","addValidation","event","target","reset","parentElement","preventDefault","submitForm","resetForm","init"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"../src","sourcesContent":["(function() {\n  const form = document.querySelector(\"form\");\n\n  /**\n   * Client-Side Validation\n   * ATTENTION: Server-side validation is REQUIRED\n   */\n  class ValidateClientSideForm {\n    constructor(form) {\n      this._form = form;\n\n      /*\n      Validation patterns for different field types. Password validation is very loose, don't forget this is only a demo without clear requirement about this type of data.\n      */\n      this.validator = {\n        email: {\n          regex: /^([a-zA-Z0-9\\.-]{1,64})+@([a-z]{1,254})+\\.([a-z]{2,8})(\\.[a-z]{2,8})?$/,\n          message: \"Looks like this is not an email\"\n        },\n        text: {\n          regex: /^[a-zA-Z\\s]+?$/,\n          message: \"cannot be empty\"\n        },\n        password: {\n          regex: /^[a-zA-Z0-9\\_-]+?$/,\n          message: \"cannot be empty\"\n        }\n      };\n\n      this._errors = [];\n\n      this.fields = [\n        ...this._form.querySelectorAll(\"input:not([type='submit'])\")\n      ];\n    }\n\n    init() {\n      this._form.addEventListener(\"submit\", this.handleSubmit.bind(this));\n\n      this.fields.forEach(field => {\n        field.addEventListener(\"focus\", this.handleFocus.bind(this), true);\n        field.addEventListener(\"blur\", this.handleBlur.bind(this), true);\n        field.addEventListener(\"input\", this.handleInput.bind(this));\n      });\n    }\n\n    validate(field) {\n      const { value, type, name } = field;\n\n      if (value === \"\") return false;\n      else if (name === \"email\" || type === \"email\")\n        return this.validator[name].regex.test(value);\n      else return this.validator[type].regex.test(value);\n    }\n\n    addValidation(field) {\n      if (this.validate(field)) this.removeAlert(field.id);\n      else this.addAlert(field.id);\n    }\n\n    addAlert(id) {\n      const field = this.fields.find(field => field.id === id);\n      this.setAlert(field);\n      this.setError(field.name);\n    }\n\n    removeAlert(id) {\n      const field = this.fields.find(field => field.id === id);\n      this.clearAlert(field);\n      this.clearError(field.name);\n    }\n\n    setAlert(field) {\n      const { type, name } = field;\n      field.classList.add(\"invalid\");\n      field.classList.remove(\"valid\");\n      field.setAttribute(\"aria-invalid\", true);\n\n      const message = `${\n        name === \"email\"\n          ? this.validator[name].message\n          : [field.labels[0].textContent, this.validator[type].message].join(\n              ` `\n            )\n      }`;\n      if (field.nextElementSibling.classList.contains(\"help\"))\n        field.nextElementSibling.textContent = message;\n      field.setCustomValidity(message);\n    }\n\n    clearAlert(field) {\n      field.classList.remove(\"invalid\");\n      field.classList.add(\"valid\");\n      field.setAttribute(\"aria-invalid\", false);\n      if (field.nextElementSibling.classList.contains(\"help\"))\n        field.nextElementSibling.textContent = \"\";\n      field.setCustomValidity(\"\");\n    }\n\n    setError(errName) {\n      if (this._errors.includes(errName)) return;\n      this._errors.push(errName);\n    }\n\n    clearError(errName) {\n      if (this._errors.length == 0) return;\n      this._errors.splice(this._errors.indexOf(errName), 1);\n    }\n\n    setFocus(name) {\n      const el = this.fields.find(el => el.name === name);\n      el.focus();\n    }\n\n    getEmptyFields() {\n      return this.fields.filter(field => {\n        return field.value === \"\";\n      });\n    }\n\n    submitForm() {\n      // If found errors from instant validation then auto focus the first error\n      if (this._errors.length > 0) {\n        this.setFocus(this._errors[0]);\n        return false;\n      }\n      // else validate fields if user left empty fields\n      else if (this.getEmptyFields().length > 0) {\n        this.getEmptyFields().forEach(field => {\n          this.addValidation(field);\n        });\n        this.setFocus(this.getEmptyFields()[0].name);\n        return false;\n      }\n      // ready to subumit form\n      else return true;\n    }\n\n    resetForm(event) {\n      event.target.reset();\n      this.fields.forEach(field => {\n        this.removeAlert(field.id);\n        field.parentElement.classList.remove(\"focused\");\n        field.classList.remove(\"valid\");\n      });\n    }\n\n    handleSubmit(event) {\n      event.preventDefault();\n\n      // returns true if form has no errors else false forms has errors.\n      if (this.submitForm()) {\n        // console.log(\"Succesful!\");\n        this.resetForm(event);\n        return true;\n      } else {\n        // console.log(\"Failed!\");\n        return false;\n      }\n    }\n\n    handleFocus({ target }) {\n      if (target.parentElement.classList.contains(\"input\"))\n        target.parentElement.classList.add(\"focused\");\n    }\n\n    handleBlur({ target }) {\n      if (target.parentElement.classList.contains(\"input\"))\n        if (target.value.length == 0) {\n          target.parentElement.classList.remove(\"focused\");\n        }\n    }\n\n    handleInput({ target }) {\n      // handles instant validation the field\n      this.addValidation(target);\n    }\n  }\n\n  new ValidateClientSideForm(form).init();\n})();\n"]}